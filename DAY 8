// This assumes you have a Next.js project set up and Tailwind CSS configured.
// For Tailwind CSS, ensure 'tailwind.config.js' includes your 'app' directory:
/*
module.exports = {
  content: [
    './app/**/*.{js,ts,jsx,tsx,mdx}', // Add this line
    // ... other paths
  ],
  theme: {
    extend: {},
  },
  plugins: [],
};
*/

// --- app/blog/page.js ---
// This file creates the /blog page, displaying a list of posts.

import Link from 'next/link';

// Function to fetch blog posts from the API
async function getPosts() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts');
  // Handle non-OK responses (e.g., 404, 500)
  if (!res.ok) {
    throw new Error('Failed to fetch posts');
  }
  // Parse JSON and limit to the first 10 posts for a cleaner example
  const posts = await res.json();
  return posts.slice(0, 10);
}

// Main BlogPage component (Server Component)
export default async function BlogPage() {
  const posts = await getPosts(); // Fetch data when the component renders

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <main className="container mx-auto">
        <h1 className="text-4xl font-bold text-center text-gray-800 mb-10">Our Blog Posts</h1>

        {/* Grid layout for blog cards using Tailwind CSS */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {posts.map((post) => (
            <div
              key={post.id}
              className="bg-white rounded-lg shadow-md p-6
                         transform transition duration-300 hover:scale-105 hover:shadow-lg"
            >
              <h2 className="text-xl font-semibold text-gray-900 mb-2">{post.title}</h2>
              <p className="text-gray-700 text-base mb-4 line-clamp-3">{post.body}</p>
              {/* Link to the dynamic single post page */}
              <Link href={`/blog/${post.id}`} className="text-blue-600 hover:text-blue-800 font-medium">
                Read More &rarr;
              </Link>
            </div>
          ))}
        </div>
      </main>
    </div>
  );
}


// --- app/blog/[id]/page.js ---
// This file creates dynamic pages like /blog/1, /blog/2, etc., for individual posts.

import { notFound } from 'next/navigation';

// Function to fetch a single post by ID
async function getPost(id) {
  const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${id}`);
  // If the response is not OK (e.g., 404), trigger Next.js's notFound handler
  if (!res.ok) {
    notFound();
  }
  return res.json();
}

// generateStaticParams tells Next.js which dynamic paths to pre-render at build time.
// This is the App Router equivalent of getStaticPaths.
export async function generateStaticParams() {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts');
  const posts = await res.json();

  // Return an array of objects, where each object's key matches the dynamic segment name ([id])
  // We'll generate paths for the first 10 posts as an example.
  return posts.slice(0, 10).map((post) => ({
    id: post.id.toString(), // The ID must be a string
  }));
}

// Dynamic PostPage component (Server Component)
// `params` will contain the dynamic segment values (e.g., { id: '1' })
export default async function PostPage({ params }) {
  const post = await getPost(params.id); // Fetch the specific post data

  return (
    <div className="min-h-screen bg-gray-100 p-8">
      <main className="container mx-auto bg-white rounded-lg shadow-md p-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-4">{post.title}</h1>
        <p className="text-gray-700 text-lg leading-relaxed">{post.body}</p>
        {/* You can add a button or Link to navigate back to the blog list */}
        <Link
          href="/blog"
          className="mt-8 inline-block px-4 py-2 bg-blue-600 text-white rounded-md
                     hover:bg-blue-700 transition duration-300"
        >
          &larr; Back to Blog
        </Link>
      </main>
    </div>
  );
}
