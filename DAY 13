// app/blog/page.js
// This directive marks the component as a Client Component, which is necessary
// for using React hooks (useState, useEffect) and interactive libraries like Framer Motion.
"use client";

import { motion } from 'framer-motion'; // Import Framer Motion for animations

// --- Mock Data Fetching Simulation ---
// This function simulates fetching data from an API or a database.
// In a real application, you would replace this with actual data fetching logic,
// for example, using 'fetch' or a data fetching library like SWR or React Query.
const mockFetchPosts = () => {
  return new Promise(resolve => {
    setTimeout(() => { // Simulate a network delay of 1.5 seconds to demonstrate loading state
      const posts = [
        { id: 1, title: 'Understanding Next.js Fundamentals', category: 'Web Development', content: '...' },
        { id: 2, title: 'Optimizing Images in Next.js for Performance', category: 'Next.js Tips', content: '...' },
        { id: 3, title: 'Building Robust APIs with Next.js & Serverless Functions', category: 'Backend Development', content: '...' },
        { id: 4, title: 'Deploying Your Next.js App to Vercel for Production', category: 'DevOps', content: '...' },
        { id: 5, title: 'Advanced State Management in Next.js Applications', category: 'Web Development', content: '...' },
        { id: 6, title: 'Client vs. Server Components: A Deep Dive in Next.js 14', category: 'Next.js Concepts', content: '...' },
        { id: 7, title: 'Implementing Secure Authentication in Next.js Apps', category: 'Security', content: '...' },
        { id: 8, title: 'Exploring Next.js App Router Features and Best Practices', category: 'Next.js Tips', content: '...' },
        { id: 9, title: 'Performance Best Practices: Boosting Your Next.js Lighthouse Score', category: 'Web Development', content: '...' },
        { id: 10, title: 'Building Dynamic Routes and Nested Layouts with Next.js', category: 'Next.js Concepts', content: '...' },
      ];
      resolve(posts); // Resolve the promise with the mock data
    }, 1500); // 1.5 second delay
  });
};
// --- End Mock Data ---


// --- Framer Motion Animation Variants ---
// These objects define the different visual states for animated elements.
// They make animations reusable and declarative.

// Variants for the main container (page entry animation)
const containerVariants = {
  hidden: { opacity: 0 }, // Initial state: fully transparent
  visible: {
    opacity: 1, // Final state: fully opaque
    transition: {
      staggerChildren: 0.1, // Stagger the animation of child cards by 0.1 seconds
      when: "beforeChildren", // Ensure parent animation completes before children start
    },
  },
};

// Variants for individual cards (entry and hover animations)
const cardVariants = {
  hidden: { y: 20, opacity: 0 }, // Initial state: slightly below its final position and transparent
  visible: {
    y: 0, // Final state: at its original Y position
    opacity: 1, // Final state: fully opaque
    transition: {
      type: "spring",    // Use a spring animation for a natural, bouncy feel
      stiffness: 100,    // How "stiff" the spring is (higher value = faster snap)
      damping: 10,       // How much "damping" (resistance) the spring has (lower value = more bounce)
    },
  },
  hover: {
    scale: 1.03, // Scale up the card by 3% on hover
    boxShadow: "0 8px 20px rgba(0,0,0,0.15)", // Enhance shadow on hover for depth effect
    transition: {
      duration: 0.2 // Quick transition for hover effect
    }
  }
};


// Main Blog/Services Page Component
export default function BlogOrServicesPage() {
  // State to hold the current value of the search input
  const [searchTerm, setSearchTerm] = useState('');
  // State to store all original posts fetched from the mock API
  const [posts, setPosts] = useState([]);
  // State to store posts after filtering based on the search term
  const [filteredPosts, setFilteredPosts] = useState([]);
  // State to manage the loading status of the data
  const [loading, setLoading] = useState(true);

  // --- Data Fetching Effect ---
  // This useEffect hook runs once when the component mounts.
  // It simulates an asynchronous data fetch and updates the 'posts' and 'filteredPosts' states.
  useEffect(() => {
    const fetchAndSetPosts = async () => {
      setLoading(true); // Indicate loading has started
      try {
        const fetchedPosts = await mockFetchPosts(); // Await the simulated data fetch
        setPosts(fetchedPosts); // Store the fetched data
        setFilteredPosts(fetchedPosts); // Initially, display all fetched posts
      } catch (error) {
        console.error("Failed to fetch posts:", error);
        // In a production application, you would typically set an error state here
        // and display a user-friendly error message to the user.
      } finally {
        setLoading(false); // Indicate loading has finished, regardless of success or error
      }
    };

    fetchAndSetPosts(); // Call the async function to fetch posts
  }, []); // Empty dependency array ensures this effect runs only once on mount

  // --- Filtering Effect ---
  // This useEffect hook runs whenever 'searchTerm', 'posts', or 'loading' state changes.
  // It performs the live filtering of posts based on the current search term.
  useEffect(() => {
    // Only perform filtering if the data has finished loading.
    // This prevents trying to filter an empty 'posts' array before data arrives.
    if (!loading) {
      const lowercasedSearchTerm = searchTerm.toLowerCase();

      // Filter from the 'posts' (original data) array, not 'filteredPosts',
      // to ensure all posts are always available for new search queries.
      const results = posts.filter(post =>
        post.title.toLowerCase().includes(lowercasedSearchTerm) || // Check if title includes search term
        post.category.toLowerCase().includes(lowercasedSearchTerm) // Check if category includes search term
      );
      setFilteredPosts(results); // Update the state with the filtered results
    }
  }, [searchTerm, posts, loading]); // Dependencies: searchTerm (for live filtering), posts (if underlying data changes), loading (to re-trigger after initial load)


  // --- Event Handler for Search Input ---
  // Updates the 'searchTerm' state as the user types, triggering the filtering effect.
  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value);
  };

  return (
    // motion.div for the main page container to apply the page entry animation
    <motion.div
      className="blog-services-page-container"
      initial="hidden" // Start from the 'hidden' state defined in containerVariants
      animate="visible" // Animate to the 'visible' state
      variants={containerVariants} // Apply the animation variants
    >
      {/* Page Title */}
      <h1 className="page-title">Our Blog & Services</h1>

      {/* Search Input Bar */}
      <div className="search-bar-wrapper">
        <input
          type="text"
          placeholder="Search by title or category..."
          value={searchTerm}
          onChange={handleSearchChange}
          className="search-input"
          disabled={loading} // Disable search input while data is loading
          aria-label="Search blog posts or services" // Accessibility improvement
        />
      </div>

      {loading ? (
        // Display loading spinner while data is being fetched
        <div className="loading-state">
          <div className="spinner"></div>
          <p>Loading posts...</p>
        </div>
      ) : (
        // Once data is loaded, display the filtered cards.
        // motion.div is used here for the staggered animation of child cards.
        <motion.div className="cards-grid" variants={containerVariants}>
          {filteredPosts.length > 0 ? (
            filteredPosts.map(post => (
              // motion.div for each card to apply entry and hover animations.
              <motion.div
                key={post.id}
                className="blog-service-card"
                variants={cardVariants} // Apply card entry animation
                whileHover="hover"      // Apply card hover animation
                initial="hidden"        // Ensure individual cards also start hidden
                animate="visible"       // Animate individual cards to visible
              >
                <h3 className="card-title">{post.title}</h3>
                <p className="card-category">Category: {post.category}</p>
                {/* You can add more content here, like a snippet or a link */}
                <button className="read-more-button">Read More</button>
              </motion.div>
            ))
          ) : (
            // Message when no results are found
            <p className="no-results">No results found for &quot;{searchTerm}&quot;.</p>
          )}
        </motion.div>
      )}

      {/* Tailwind CSS is assumed to be available.
          If not, you would use traditional CSS files, CSS Modules, or another styling solution. */}
      <style jsx>{`
        /* Global styles for Inter font can be set in global.css or layout.js */
        :root {
          --font-inter: 'Inter', sans-serif;
        }

        .blog-services-page-container {
          padding: 2.5rem; /* Equivalent to p-10 */
          max-width: 1200px; /* Equivalent to max-w-screen-xl */
          margin: 0 auto; /* mx-auto */
          background-color: #f8fafc; /* bg-slate-50 */
          min-height: 100vh;
          font-family: var(--font-inter);
          color: #333;
        }

        .page-title {
          text-align: center;
          font-size: 2.5rem; /* text-4xl */
          font-weight: 700; /* font-bold */
          margin-bottom: 2.5rem; /* mb-10 */
          color: #1e293b; /* text-slate-900 */
        }

        .search-bar-wrapper {
          margin-bottom: 2.5rem; /* mb-10 */
          width: 100%;
        }

        .search-input {
          width: 100%;
          padding: 0.75rem 1rem; /* py-3 px-4 */
          border: 1px solid #e2e8f0; /* border-slate-200 */
          border-radius: 0.5rem; /* rounded-lg */
          font-size: 1rem; /* text-base */
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05); /* shadow-md */
          transition: border-color 0.3s ease, box-shadow 0.3s ease, background-color 0.3s ease;
          appearance: none; /* Remove default styling for consistency */
        }

        .search-input:focus {
          outline: none;
          border-color: #3b82f6; /* border-blue-500 */
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.25); /* ring-4 ring-blue-300 */
        }

        .search-input:disabled {
          background-color: #f1f5f9; /* bg-slate-100 */
          cursor: not-allowed;
          opacity: 0.7;
        }

        /* Loading Spinner */
        .loading-state {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: center;
          min-height: 200px;
          font-size: 1.125rem; /* text-lg */
          color: #64748b; /* text-slate-600 */
        }

        .spinner {
          border: 4px solid rgba(0, 0, 0, 0.1);
          border-left-color: #3b82f6; /* border-blue-500 */
          border-radius: 50%;
          width: 40px;
          height: 40px;
          animation: spin 1s linear infinite;
          margin-bottom: 1rem; /* mb-4 */
        }

        @keyframes spin {
          0% { transform: rotate(0deg); }
          100% { transform: rotate(360deg); }
        }

        .cards-grid {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
          gap: 1.5rem; /* gap-6 */
        }

        .blog-service-card {
          background-color: #ffffff; /* bg-white */
          border-radius: 0.75rem; /* rounded-xl */
          box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-xl */
          padding: 1.5rem; /* p-6 */
          border: 1px solid #f1f5f9; /* border-slate-100 */
          display: flex;
          flex-direction: column;
          justify-content: space-between;
          transition: transform 0.2s ease, box-shadow 0.2s ease;
          cursor: pointer;
        }

        .card-title {
          font-size: 1.25rem; /* text-xl */
          font-weight: 600; /* font-semibold */
          color: #1e293b; /* text-slate-900 */
          margin-bottom: 0.5rem; /* mb-2 */
        }

        .card-category {
          font-size: 0.875rem; /* text-sm */
          color: #64748b; /* text-slate-600 */
          margin-bottom: 1rem; /* mb-4 */
        }

        .read-more-button {
          background-color: #3b82f6; /* bg-blue-500 */
          color: #ffffff; /* text-white */
          padding: 0.5rem 1rem; /* py-2 px-4 */
          border-radius: 0.375rem; /* rounded-md */
          font-weight: 500; /* font-medium */
          transition: background-color 0.2s ease, transform 0.1s ease;
          align-self: flex-start;
          border: none;
          cursor: pointer;
        }

        .read-more-button:hover {
          background-color: #2563eb; /* bg-blue-600 */
          transform: translateY(-1px);
        }

        .no-results {
          grid-column: 1 / -1; /* Span across all columns */
          text-align: center;
          font-size: 1.125rem; /* text-lg */
          color: #64748b; /* text-slate-600 */
          padding: 2rem; /* p-8 */
          background-color: #f1f5f9; /* bg-slate-100 */
          border-radius: 0.75rem; /* rounded-xl */
          margin-top: 1.5rem;
        }

        /* Responsive adjustments using Tailwind-like breakpoints */
        @media (max-width: 768px) {
          .cards-grid {
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
          }
          .page-title {
            font-size: 2rem; /* text-3xl */
          }
          .blog-services-page-container {
            padding: 1.5rem; /* p-6 */
          }
        }

        @media (max-width: 480px) {
          .cards-grid {
            grid-template-columns: 1fr;
          }
          .blog-services-page-container {
            padding: 1rem; /* p-4 */
          }
          .page-title {
            font-size: 1.75rem; /* text-2xl */
            margin-bottom: 2rem; /* mb-8 */
          }
          .search-bar-wrapper {
            margin-bottom: 2rem; /* mb-8 */
          }
        }
      `}</style>
    </motion.div>
  );
}
